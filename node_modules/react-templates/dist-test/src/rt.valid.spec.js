'use strict';

var reactTemplates = require('../../src/reactTemplates');
var testUtils = require('./testUtils');
var readFileNormalized = testUtils.readFileNormalized;
var compareAndWrite = testUtils.compareAndWrite;
var path = require('path');
var context = require('../../src/context');
var fsUtil = require('../../src/fsUtil');
var fs = require('fs');

module.exports = {
    runTests: function runTests(test, dataPath) {
        function checkFile(t, options, testFile) {
            var filename = path.join(dataPath, testFile);
            var html = readFileNormalized(filename);
            var expected = readFileNormalized(filename + '.js');
            var actual = reactTemplates.convertTemplateToReact(html, options).replace(/\r/g, '').trim();
            compareAndWrite(t, actual, expected, filename);
        }

        function testFiles(t, files, options) {
            t.plan(files.length);
            files.forEach(checkFile.bind(this, t, options));
        }

        test('rt-if with rt-scope test', function (t) {
            var files = ['if-with-scope/valid-if-scope.rt'];
            testFiles(t, files);
        });

        test('conversion test', function (t) {
            var files = ['div.rt', 'test.rt', 'repeat.rt', 'inputs.rt', 'require.rt', 'virtual.rt'];
            testFiles(t, files);
        });

        test('prop template conversion test', function (t) {
            var options = {
                propTemplates: {
                    List: {
                        Row: { prop: 'renderRow', arguments: ['rowData'] }
                    }
                }
            };
            var files = ['propTemplates/simpleTemplate.rt', 'propTemplates/templateInScope.rt', 'propTemplates/implicitTemplate.rt', 'propTemplates/twoTemplates.rt'];
            testFiles(t, files, options);
        });

        test('conversion test - native', function (t) {
            var options = {
                propTemplates: {
                    MyComp: {
                        Row: { prop: 'renderRow', arguments: ['rowData'] }
                    }
                },
                native: true
            };
            var files = ['native/nativeView.rt', 'native/listViewTemplate.rt', 'native/listViewAndCustomTemplate.rt'];
            testFiles(t, files, options);
        });

        test('convert div with all module types', function (t) {
            var files = [{ source: 'div.rt', expected: 'div.rt.commonjs.js', options: { modules: 'commonjs' } }, { source: 'div.rt', expected: 'div.rt.amd.js', options: { modules: 'amd', name: 'div' } }, { source: 'div.rt', expected: 'div.rt.globals.js', options: { modules: 'none', name: 'div' } }, { source: 'div.rt', expected: 'div.rt.es6.js', options: { modules: 'es6', name: 'div' } }, { source: 'div.rt', expected: 'div.rt.typescript.ts', options: { modules: 'typescript' } }];
            t.plan(files.length);
            files.forEach(check);

            function check(testData) {
                var filename = path.join(dataPath, testData.source);
                var html = readFileNormalized(filename);
                var expected = readFileNormalized(path.join(dataPath, testData.expected));
                var actual = reactTemplates.convertTemplateToReact(html, testData.options).replace(/\r/g, '').trim();
                compareAndWrite(t, actual, expected, filename);
            }
        });

        test('convert jsrt and test source results', function (t) {
            var files = ['simple.jsrt'];
            t.plan(files.length);
            files.forEach(check);

            function check(file) {
                var filename = path.join(dataPath, file);
                var js = readFileNormalized(filename);
                var expected = readFileNormalized(path.join(dataPath, file.replace('.jsrt', '.js')));
                var actual = reactTemplates.convertJSRTToJS(js, context).replace(/\r/g, '').trim();
                compareAndWrite(t, actual, expected, filename);
            }
        });

        test('html tests', function (t) {
            var files = ['scope.rt', 'scope-trailing-semicolon.rt', 'scope-variable-references.rt', 'lambda.rt', 'eval.rt', 'props.rt', 'custom-element.rt', 'style.rt', 'concat.rt', 'js-in-attr.rt', 'props-class.rt', 'rt-class.rt', 'className.rt', 'svg.rt', 'virtual.rt', 'scope-evaluated-after-repeat.rt', 'scope-evaluated-after-repeat2.rt', 'scope-evaluated-after-if.rt', 'scope-obj.rt', 'repeat-literal-collection.rt', 'include.rt'];
            t.plan(files.length);

            files.forEach(check);

            function check(testFile) {
                var filename = path.join(dataPath, testFile);
                var options = {
                    readFileSync: fsUtil.createRelativeReadFileSync(filename)
                };
                var code = '';
                try {
                    var html = fs.readFileSync(filename).toString();
                    var expected = testUtils.normalizeHtml(readFileNormalized(filename + '.html'));
                    code = reactTemplates.convertTemplateToReact(html, options).replace(/\r/g, '');
                    var actual = testUtils.normalizeHtml(testUtils.codeToHtml(code));
                    var equal = compareAndWrite(t, actual, expected, filename);
                    if (!equal) {
                        fs.writeFileSync(filename + '.code.js', code);
                    }
                } catch (e) {
                    console.log(testFile, e);
                    fs.writeFileSync(filename + '.code.js', code);
                }
            }
        });
    }
};